<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>千里之行 始于足下</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yiming1012.github.io/"/>
  <updated>2019-08-13T04:34:13.298Z</updated>
  <id>https://yiming1012.github.io/</id>
  
  <author>
    <name>易明</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TDengine+Telegraf+Grafana搭建监控系统</title>
    <link href="https://yiming1012.github.io/2019/08/13/TDengine-Telegraf-Grafana%E6%90%AD%E5%BB%BA%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>https://yiming1012.github.io/2019/08/13/TDengine-Telegraf-Grafana搭建监控系统/</id>
    <published>2019-08-13T04:27:19.000Z</published>
    <updated>2019-08-13T04:34:13.298Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章作者：易明<br>个人博客：<a href="https://yiming1012.github.io/">https://yiming1012.github.io</a><br>简书主页：<a href="https://www.jianshu.com/u/6ebea55f5cec" target="_blank" rel="noopener">https://www.jianshu.com/u/6ebea55f5cec</a><br>邮箱地址：<a href="mailto:1129079384@qq.com" target="_blank" rel="noopener">1129079384@qq.com</a></p></blockquote><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>  &#160; &#160; &#160;&#160;TDengine是一个高效的存储、查询、分析时序大数据的平台，专为物联网、车联网、工业互联网、运维监测等优化而设计。而作为服务于一家车联网公司且有着钻研精神的大数据工程师，自然会摸索一番。<br> &#160; &#160; &#160;&#160;在安装好TDengine后，根据官方给出的TDengine+Telegraf+Grafana组合，搭建监控平台。</p><blockquote><p>Telegraf–数据采集<br>TDengine–数据存储<br>Grafana–数据展示</p></blockquote><p>利用官方博客给出的c程序向TDengine插入数据，并通过监控平台观测CPU、内存和磁盘利用率如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-01b3b283244b00a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h1 id="Linux环境："><a href="#Linux环境：" class="headerlink" title="Linux环境："></a>Linux环境：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 系统：Centos7.2</span><br><span class="line">2. 内存：8G</span><br><span class="line">3. 磁盘：1T</span><br><span class="line">4. CPU：Intel(R) Pentium(R) CPU G3250 @ 3.20GHz</span><br><span class="line">5. 核数：2核</span><br></pre></td></tr></table></figure><h1 id="TDengine部署："><a href="#TDengine部署：" class="headerlink" title="TDengine部署："></a>TDengine部署：</h1><blockquote><p>1、从官网<a href="https://www.taosdata.com/cn/getting-started/" target="_blank" rel="noopener">https://www.taosdata.com/cn/getting-started/</a>下载RPM包（tdengine-1.6.0.0-3.el7.x86_64.rpm）<br>2、安装：rpm -ivh tdengine-1.6.0.0-3.el7.x86_64.rpm<br>3、启动taos：systemctl start taosd<br>4、输入taos，进入数据库</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-11f62454c4d8f256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-6741204beda524bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h1 id="Telegraf部署："><a href="#Telegraf部署：" class="headerlink" title="Telegraf部署："></a>Telegraf部署：</h1><p> &#160; &#160; &#160;&#160;Telegraf 是收集和报告指标和数据的代理。Telegraf是TICK Stack的一部分，是一个插件驱动的服务器代理，用于收集和报告指标。</p><p>1、进入官网<a href="https://portal.influxdata.com/downloads/" target="_blank" rel="noopener">https://portal.influxdata.com/downloads/</a>下载</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-d7dcd3632c03cb10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>2、选择对应版本安装</p><blockquote><p>wget <a href="https://dl.influxdata.com/telegraf/releases/telegraf-1.11.3-1.x86_64.rpm" target="_blank" rel="noopener">https://dl.influxdata.com/telegraf/releases/telegraf-1.11.3-1.x86_64.rpm</a><br>sudo yum localinstall telegraf-1.11.3-1.x86_64.rpm</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-385f9833c5fbeb9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>3、配置Telegraf，进入<code>/etc/telegraf/telegraf.conf</code></p><h4 id="在-agent-部分修改配置项："><a href="#在-agent-部分修改配置项：" class="headerlink" title="在[agent]部分修改配置项："></a>在[agent]部分修改配置项：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`hostname`: 区分不同采集设备的机器名称，需确保其唯一性</span><br><span class="line">`metric_batch_size`: 30，允许Telegraf每批次写入记录最大数量，增大其数量可以降低Telegraf的请求发送频率，但对于TDengine，该数值不能超过50</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/18944909-6ba3952903e5ea7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="在-outputs-http-修改配置项："><a href="#在-outputs-http-修改配置项：" class="headerlink" title="在[[outputs.http]]修改配置项："></a>在[[outputs.http]]修改配置项：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url：http://ip:6020/telegraf/udb，其中ip为TDengine集群的中任意一台服务器的IP地址，6020为TDengine RESTful接口的端口号，telegraf为固定关键字，udb为用于存储采集数据的数据库名称，可预先创建（一般默认生成）</span><br><span class="line">method: &quot;POST&quot; </span><br><span class="line">username: 登录TDengine的用户名，默认为root</span><br><span class="line">password: 登录TDengine的密码，默认为taosdata</span><br><span class="line">data_format: &quot;json&quot;</span><br><span class="line">json_timestamp_units: &quot;1ms&quot; `注意这一行不能直接复制粘贴，里面“:”要改成“=”`</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/18944909-d10089c2ca1a56da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>4、启动Telegraf </p><blockquote><p>systemctl start telegraf</p></blockquote><p>5、进入taos数据库，查看生成的库和表</p><blockquote><p>show databases; –显示数据库<br>use udb;–使用数据库<br>show stables;–显示超级表<br>show tables;–显示普通表</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-847bfb457cc93d36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h1 id="Grafana部署："><a href="#Grafana部署：" class="headerlink" title="Grafana部署："></a>Grafana部署：</h1><p> &#160; &#160; &#160;&#160;Grafana是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。</p><p>1、进入官网<a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">https://grafana.com/grafana/download</a>下载并安装：</p><blockquote><p>wget <a href="https://dl.grafana.com/oss/release/grafana-6.2.5-1.x86_64.rpm" target="_blank" rel="noopener">https://dl.grafana.com/oss/release/grafana-6.2.5-1.x86_64.rpm</a><br>sudo yum localinstall grafana-6.2.5-1.x86_64.rpm</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-d2d3448cc9231eea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>2、TDengine的Grafana插件在安装包的<code>/usr/local/taos/connector/grafana</code>目录下。</p><p>以CentOS 7.2系统为例，将tdengine目录拷贝到<code>/var/lib/grafana/plugins</code>目录下</p><blockquote><p>scp -r /usr/local/taos/connector/grafana/tdengine/ /var/lib/grafana/plugins</p></blockquote><p>3、启动Grafana</p><blockquote><p>systemctl start grafana-server</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-0b1dc58590a4675a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>4、在浏览器中通过<code>host:3000</code>登录Grafana服务器（<code>用户名/密码：admin/admin</code>）</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-f29c0f11fb09427c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>5、添加数据源为TDengine</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-f3c4fd9c6ecbe816.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-832deb6da6cd4cfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>用户名/密码为连接TDengine的root/taosdata，<code>而不是Grafana的admin/admin</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-e69095555f10a18d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>6、创建dashboard实现数据可视化</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-929c450afdf64bd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-5248396875858018.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-5efa2d0fe274cbfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-ef6d14fc81642766.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>以上分为7个步骤，分别用1-7标明：</p><blockquote><p>1、点击Queries图标<br>2、选择Query中的TDengine<br>3、在INPUT SQL中填入需要显示的指标，以上为CPU利用率:<br><code>select avg(f_usage_user) from udb.cpu WHERE ts&gt;=$from and ts&lt;$to interval($interval)</code><br>4、为Panel形取一个别名：CPU<br>5、点击GENERATE SQL，生成图形<br>6、选择需要展示的时间段，如Last 5 minutes<br>7、选择图形刷新的频率，如5s</p></blockquote><p>7、配置Visualization参数</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-0bb18b87062b8198.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>8、设置General参数</p><blockquote><p>点击General，为Panel修改名称为：CPU利用率</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-8357904675e6f505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>9、配置Settings</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-00451012d5021e7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-483e2678817c5205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>10、保存后得到下图</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-91703e148ac35826.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>11、进入Grafana官网<a href="https://grafana.com/grafana/plugins?type=panel" target="_blank" rel="noopener">https://grafana.com/grafana/plugins?type=panel</a>还可以安装一些插件，如时钟等</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-03e0b0584f945a3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-4237544a967bacbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><blockquote><p>grafana-cli plugins install grafana-clock-panel<br>systemctl restart grafana-server</p></blockquote><p>重启Grafana后，刷新dashboard便会出现Clock</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-eca217af67f916d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-9dddbdd5192aeb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>12、其他监控指标如下：</p><h4 id="磁盘利用率"><a href="#磁盘利用率" class="headerlink" title="磁盘利用率"></a>磁盘利用率</h4><blockquote><p><code>select avg(f_used_percent) from udb.disk WHERE ts&gt;=$from and ts&lt;$to interval($interval);</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-c596b99cc7fad4be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-d1b886277d7d9e73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="总内存"><a href="#总内存" class="headerlink" title="总内存"></a>总内存</h4><blockquote><p><code>select avg(f_total) from udb.mem WHERE ts&gt;=$from and ts&lt;$to interval($interval);</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-8ee39141e1b5c33b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-d01532f4193b7c8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="内存利用率"><a href="#内存利用率" class="headerlink" title="内存利用率"></a>内存利用率</h4><blockquote><p><code>select avg(f_used_percent) from udb.mem WHERE ts&gt;=$from and ts&lt;$to interval($interval);</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-89f836bd5f4c44cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-91c289bea4d9ae21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="可用内存"><a href="#可用内存" class="headerlink" title="可用内存"></a>可用内存</h4><blockquote><p><code>select avg(f_available) from udb.mem WHERE ts&gt;=$from and ts&lt;$to interval($interval);</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-be1e78e15991139e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-fc4dc6188d5aefbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>  &#160; &#160; &#160;&#160;基于TDengine+Telegraf+Grafana的简易监控平台搭建完成，感兴趣的朋友可以监控更多指标并加上报警功能等。TDengine自开源以来便引起了巨大反响，使用过一段时间后，不得不说，TDengine的诞生确实为物联网数据的存储分析带来了便利，我有以下几个心得：</p><p>1、从部署来讲，即使搭建过很多次Hadoop架构，我还是得仔细配置调参测试，至少得折腾一两天，TDengine单机版部署确实是秒级，集群版部署流程不太清楚。</p><p>2、从存储来讲，我用的是snappy算法，官方给出的压缩率是remaining 20%，在测试的时候感觉并没有这么多，我们磁盘总共60T，3月开始到现在用了差不多10T了。TDengine的压缩率是10%。</p><p>3、从数据分析来讲，我们读取Hbase数据，快的方法是Spark，我们的行健是车辆ID和时间戳的组合，相邻时间的数据可能分散在各个region上，在不同的机器上，通过RPC连接，查询时也比较慢。而TDengine设计时一辆车对应一张表，连续的数据在一个block上，查询非常快，我用python连接单机版taos数据库，读取和分析整个超级表也是秒级的，集群版没有测试过。</p><p>4、从运维上来讲，我安装的每个组件是分开部署，不像Ambari那种集成了所有组件的，集群出问题了就要一点点排查，不过好在Hadoop架构相对比较成熟了，网上应该总能找到解决办法。而TDengine就是把所有东西都封装在一个小小的包里面，运维应该会相对轻松。</p><p>  &#160; &#160; &#160;&#160;以上言论均为一家之言，最后，希望能尽快感受到集群版的魅力，也祝愿TDengine蓬勃发展。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章作者：易明&lt;br&gt;个人博客：&lt;a href=&quot;https://yiming1012.github.io/&quot;&gt;https://yiming1012.github.io&lt;/a&gt;&lt;br&gt;简书主页：&lt;a href=&quot;https://www.jiansh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Windows和Linux下Python连接TDengine</title>
    <link href="https://yiming1012.github.io/2019/08/13/Windows%E5%92%8CLinux%E4%B8%8BPython%E8%BF%9E%E6%8E%A5TDengine/"/>
    <id>https://yiming1012.github.io/2019/08/13/Windows和Linux下Python连接TDengine/</id>
    <published>2019-08-13T02:33:12.000Z</published>
    <updated>2019-08-13T03:57:54.310Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章作者：易明<br>个人博客：<a href="https://yiming1012.github.io/">https://yiming1012.github.io</a><br>简书主页：<a href="https://www.jianshu.com/u/6ebea55f5cec" target="_blank" rel="noopener">https://www.jianshu.com/u/6ebea55f5cec</a><br>邮箱地址：<a href="mailto:1129079384@qq.com" target="_blank" rel="noopener">1129079384@qq.com</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p> &#160; &#160; &#160;&#160;从<a href="https://www.taosdata.com/cn/getting-started/" target="_blank" rel="noopener">https://www.taosdata.com/cn/getting-started/</a>下载并安装最新的安装包（最早的版本在访问过程中可能会出现<code>TSDB error: authentication failure</code>的错误）。TDengine在今天发布了Linux和Windows对应的Python模块，现在可以通过Python操作taos数据库，进行数据挖掘和建模。以下为我在Linux和Windows环境安装Python Connector的过程以及遇到的问题和解决办法。</p><h1 id="Linux端安装Python-Connector："><a href="#Linux端安装Python-Connector：" class="headerlink" title="Linux端安装Python Connector："></a>Linux端安装Python Connector：</h1><p>1、确保Linux环境下安装了Python环境，我在测试服务器上安装的Anaconda3.7对应Python3.7.3。</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-b915ee83d73a03c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>2、从<a href="https://github.com/taosdata/TDengine" target="_blank" rel="noopener">https://github.com/taosdata/TDengine</a>下载源码，解压后放到服务器上创建的TDengine目录下，在源代码的<code>src/connector/python</code>文件夹下可以找到linux和windows两个版本的安装包。进入linux目录，通过pip命令来安装taos。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python3/</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-dadd60c206d61f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt>    </p><p>3、执行命令python进入交互式界面，输入<code>import taos</code>报错。</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-6fcfdf06f6ab4dcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>4、出现如上错误原因：libtaos.so文件在<code>/usr/lib</code>目录下，而Centos默认不会找<code>/usr/lib</code>下的文件，解决方法：<code>在环境变量配置文件/etc/profile中配置libtaos.so路径</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 编辑配置文件：vim /etc/profile</span><br><span class="line">2. 添加配置：export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib</span><br><span class="line">3. 使修改生效：source /etc/profile</span><br></pre></td></tr></table></figure><p>5、再次进入python交互式界面，导入taos模块成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-885ee68b3318603b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>6、编写python程序读取taos数据库中默认的log表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import taos</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">#连接taos数据库</span><br><span class="line">conn = taos.connect(host=&apos;90.0.12.227&apos;, user=&apos;root&apos;, password=&apos;taosdata&apos;, port=6020,database=&apos;log&apos;)</span><br><span class="line"># 通过获取到的数据库连接conn下的cursor()方法来创建游标</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"># sql语句</span><br><span class="line">sql = &quot;SELECT * FROM log&quot;</span><br><span class="line"># read_sql 方法返回的数据类型是DataFrame</span><br><span class="line">dataframe = pd.read_sql(sql, con=conn)</span><br><span class="line">print(dataframe)</span><br></pre></td></tr></table></figure></p><p>运行结果如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-be306ffc11a2585b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h1 id="Windows端安装Python-Connector："><a href="#Windows端安装Python-Connector：" class="headerlink" title="Windows端安装Python Connector："></a>Windows端安装Python Connector：</h1><p>1、利用pip安装TDengine源代码中<code>src\connector\python\windows</code>目录下的python3对应的taos模块。</p><blockquote><p><code>pip install python3/</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-796029e596e12469.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>2、从官网<a href="https://www.taosdata.com/cn/getting-started/" target="_blank" rel="noopener">https://www.taosdata.com/cn/getting-started/</a>中下载TDengine Windows客户端<code>tdengine-windows-client-x64-1.6.1.2.exe</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-2ee994e4f040720e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>3、双击exe可执行文件，安装客户端，默认下一步到安装完成。这时<code>C:\Windows\System32\</code>和<code>C:\TDengine\driver\</code>目录下会生成taos.dll文件，通过这个文件便可以在Windows连接TDengine了。</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-8d9c74aeebd11f0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>4、在pycharm中运行程序成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-9f27be8db839fea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>  &#160; &#160; &#160;&#160;从TDengine开源之初，我就比较关注Python操作TDengine，所以与TDengine的开发人员保持密切联系，本来只针对Linux环境的TDengine考虑到Windows环境下更便于开发和调试，TDengine工程师们也紧锣密鼓的进行开发测试，经过好几次的尝试，终于大功告成。在与大佬们交流的过程中，我受益匪浅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章作者：易明&lt;br&gt;个人博客：&lt;a href=&quot;https://yiming1012.github.io/&quot;&gt;https://yiming1012.github.io&lt;/a&gt;&lt;br&gt;简书主页：&lt;a href=&quot;https://www.jiansh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hadoop+Zookeeper+Hbase高可用集群搭建</title>
    <link href="https://yiming1012.github.io/2019/08/13/Hadoop-Zookeeper-Hbase%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>https://yiming1012.github.io/2019/08/13/Hadoop-Zookeeper-Hbase高可用集群搭建/</id>
    <published>2019-08-13T02:27:20.000Z</published>
    <updated>2019-08-13T05:35:33.785Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章作者：易明<br>个人博客：<a href="https://yiming1012.github.io">https://yiming1012.github.io</a><br>简书主页：<a href="https://www.jianshu.com/u/6ebea55f5cec" target="_blank" rel="noopener">https://www.jianshu.com/u/6ebea55f5cec</a><br>邮箱地址：<a href="mailto:1129079384@qq.com" target="_blank" rel="noopener">1129079384@qq.com</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在工作中，生产环境和测试环境各搭建了一套Hadoop HA集群且运行稳定，以下为测试环境的详细部署流程以及在使用过程中踩过的坑和解决方案。</p><h1 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h1><blockquote><p>服务器：五台<br>处理器：Intel(R) Core(TM) i5-6500 CPU @ 3.20GHz<br>内存：16G<br>磁盘：1T<br>Hadoop版本：2.7.2<br>Zookeeper版本：3.4.9<br>Hbase版本：1.2.4</p></blockquote><h1 id="集群基础环境配置"><a href="#集群基础环境配置" class="headerlink" title="集群基础环境配置"></a>集群基础环境配置</h1><p>1、关闭防火墙</p><blockquote><p>systemctl stop firewalld      //关闭防火墙<br>systemctl disable firewalld   //禁止开机启动</p></blockquote><p>2、配置ntp服务时钟同步<br>1) 在各个节点上安装ntp：<code>yum -y install ntp</code><br>2) 在ntp 主节点上修改配置：<code>vim /etc/ntp.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br><span class="line">restrict 90.0.25.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line">server cn.pool.ntp.org iburst</span><br><span class="line">server 216.229.0.179 iburst</span><br><span class="line">server time.nist.gov iburst</span><br></pre></td></tr></table></figure></p><p>如果是在局域网中可以将以下的几行注释掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#server 0.centos.pool.ntp.org iburst</span><br><span class="line">#server 1.centos.pool.ntp.org iburst</span><br><span class="line">#server 2.centos.pool.ntp.org iburst</span><br><span class="line">#server 3.centos.pool.ntp.org iburst</span><br></pre></td></tr></table></figure></p><p>3) 配置ntp客户端，使其与主节点时间同步，在所有客户端执行：<code>vim /etc/ntp.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server 90.0.25.1</span><br></pre></td></tr></table></figure></p><p>4) 在所有节点上执行：</p><blockquote><p>systemctl start ntpd      //启动ntp<br>systemctl enable ntpd  //开机启动  </p></blockquote><p>5) 检查ntp同步情况，在client上执行如下语句会看到同步的主机IP，执行命令：<code>ntpq -p</code></p><blockquote><p><code>由于centos7系统上安装了一个与NTP相冲突的工具：chrony。使用命令：systemctl is-enabled chronyd来查看，得到的结果是chrony已经被设置为enabled。这就导致利用systemctl enable ntpd设置NTP开机启动后，重启服务器后，NTP并没有启动。解决办法：systemctl disable chronyd</code></p></blockquote><p>3、SSH免密登录<br>1) 在各台服务器上执行：<code>ssh-keygen -t rsa</code>，在/root下会生成.ssh目录<br>2) 在每台服务器上将id_rsa.pub拷贝到其他服务器（包括本机）上，并更名为authorized_keys，进到/root/.ssh目录，并执行命令：</p><blockquote><p>cat id_rsa.pub | ssh 90.0.25.1 ‘cat &gt;&gt; /root/.ssh/authorized_keys’    </p></blockquote><p>3) 更改.ssh权限：<code>chmod 700 .ssh</code><br>4) 更改authorized_keys权限：<code>chmod 640 authorized_keys</code><br>5) 重启sshd并设置开机启动</p><blockquote><p>systemctl restart sshd<br>systemctl enable sshd</p></blockquote><p>6) 在每台服务器上通过<code>ssh 90.0.25.1</code>测试成功</p><p>4、配置hosts文件：<code>vim /etc/hosts</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">90.0.25.1 hb1</span><br><span class="line">90.0.25.2 hb2</span><br><span class="line">90.0.25.3 hb3</span><br><span class="line">90.0.25.4 hb4</span><br><span class="line">90.0.25.5 hb5</span><br></pre></td></tr></table></figure></p><p>5、安装jdk<br>1) 首先，将从官网下载的jdk文件（tar.gz）放到/home/下的新建的java文件夹中，利用tar命令解压：<code>tar –zxvf jdk-8u111-linux-x64.tar.gz</code><br>2) 配置Java环境变量：<code>vim /etc/profile</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/home/jdk1.8.0_111</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">CLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib/dt.jar</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></p><p>3) 运行<code>source /etc/profile</code>使配置生效，并运行<code>java –version</code>进行检验</p><h1 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h1><p>安装配置zookeeper，虽然hbase有自带的zookeeper，但没有必要让hbase和zookeeper耦合在一起，所以选择分开部署<br>1) 将zookeeper-3.4.9.tar.gz放到/home目录下，如下命令解压：</p><blockquote><p>tar –zxvf  zookeeper-3.4.9.tar.gz</p></blockquote><p>2) 配置zookeeper环境变量：<code>vim /etc/profile</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/home/zookeeper-3.4.9</span><br><span class="line">export PATH=$ZOOKEEPER_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p><p> 使配置生效：<code>source /etc/profile</code></p><p>3) 在zookeeper-3.4.9目录下新建data目录：<code>mkdir data</code><br>4) 在data中新建myid文件：<code>vim myid</code>，在其中填入数字<code>1</code><br>5) 由于conf目录下没有zoo.cfg文件，所以复制zoo_sample.cfg成zoo.cfg:</p><blockquote><p>cp zoo_sample.cfg zoo.cfg</p></blockquote><p>6) 编辑zoo.cfg文件，添加如下信息，并在zookeeper-3.4.9目录下新建目录logs：<code>mkdir logs</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/home/zookeeper-3.4.9/data</span><br><span class="line">dataLogDir=/home/zookeeper-3.4.9/logs</span><br><span class="line">server.1=hb1:2888:3888    </span><br><span class="line">server.2=hb2:2888:3888    </span><br><span class="line">server.3=hb3:2888:3888</span><br><span class="line">server.4=hb4:2888:3888</span><br><span class="line">server.5=hb5:2888:3888</span><br></pre></td></tr></table></figure></p><p>7) 拷贝zookeeper-3.4.9目录到其他节点的/home目录，并分别更改myid的值为<code>2~5</code>:</p><blockquote><p>scp /zookeeper-3.4.9 hb2:/home<br>scp /zookeeper-3.4.9 hb3:/home<br>scp /zookeeper-3.4.9 hb4:/home<br>scp /zookeeper-3.4.9 hb5:/home</p></blockquote><p>8) 因为zookeeper负责协调hbase之间的通信，所以需要在每个节点上分别启动zookeeper服务：<code>cd /home/zookeeper-3.4.9/bin</code></p><blockquote><p>./zkServer.sh start</p></blockquote><h1 id="Hadoop-HA配置"><a href="#Hadoop-HA配置" class="headerlink" title="Hadoop HA配置"></a>Hadoop HA配置</h1><p>1、将hadoop-2.7.2.tar.gz放在/home目录下，解压：</p><blockquote><p>tar –zxvf hadoop-2.7.2.tar.gz</p></blockquote><p>2、配置hadoop环境变量：<code>vim /etc/profile</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Hadoop环境变量</span><br><span class="line">export HADOOP_HOME=/home/hadoop-2.7.2-ha/hadoop-2.7.2</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br></pre></td></tr></table></figure></p><p>使修改生效</p><blockquote><p>source /etc/profile</p></blockquote><p>3、进入<code>/home/hadoop-2.7.2-ha/hadoop-2.7.2/etc/hadoop</code>目录下修改配置文件<br>(1) core-site.xml配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!--指定默认hdfs集群服务名是哪个 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://ns1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定hadoop临时目录 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/hadoop-2.7.2-ha/hadoop-2.7.2/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> &lt;!-- 指定zookeeper地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hb1:2181,hb2:2181,hb3:2181,hb4:2181,hb5:2181&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;ipc.client.connect.max.retries&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;20&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;</span><br><span class="line">      Indicates the number of retries a clientwill make to establisha server connection.</span><br><span class="line">    &lt;/description&gt;</span><br><span class="line">  &lt;/property&gt; </span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;ipc.client.connect.retry.interval&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;5000&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;</span><br><span class="line">      Indicates the number of milliseconds aclient will wait for before retrying to establish a server connection.</span><br><span class="line">    &lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;io.file.buffer.size&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;262144&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>(2) hdfs-site.xml配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!--指定hdfs的nameservice为ns1，需要和core-site.xml中的保持一致 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.nameservices&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;ns1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- ns1下面有两个NameNode，分别是nn1，nn2 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.ha.namenodes.ns1&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;nn1,nn2&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- nn1的RPC通信地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.rpc-address.ns1.nn1&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hb1:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- nn1的http通信地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.http-address.ns1.nn1&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hb1:50070&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- nn2的RPC通信地址 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.rpc-address.ns1.nn2&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;hb2:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- nn2的http通信地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.namenode.http-address.ns1.nn2&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;hb2:50070&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;                    &lt;value&gt;qjournal://hb1:8485;hb2:8485;hb3:8485;hb4:8485;hb5:8485/ns1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;/home/hadoop-2.7.2-ha/hadoop-2.7.2/journaldata&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;/home/hadoop-2.7.2-ha/hadoop-2.7.2/name&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;/home/hadoop-2.7.2-ha/hadoop-2.7.2/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 开启NameNode失败自动切换 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置失败自动切换实现方式 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.client.failover.proxy.provider.ns1&lt;/name&gt;                    &lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;</span><br><span class="line">                sshfence</span><br><span class="line">                shell(/bin/true)</span><br><span class="line">         &lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">         &lt;!-- 配置sshfence隔离机制超时时间 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.ha.fencing.ssh.connect-timeout&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;30000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 增加NameNode和DataNode处理线程数 --&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.handler.count&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;50&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.datanode.handler.count&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;8&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt; </span><br><span class="line">    &lt;name&gt;dfs.datanode.max.transfer.threads&lt;/name&gt; </span><br><span class="line">    &lt;value&gt;8192&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;!-- 开启短路读，DataNode传递文件描述符而不是路径 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.client.read.shortcircuit&lt;/name&gt;     </span><br><span class="line">      &lt;value&gt;true&lt;/value&gt;   </span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.domain.socket.path&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;/var/lib/hadoop-hdfs/dn.socket&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>(3) mapred-site.xml配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- 指定mr框架为yarn方式 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- mr转化历史任务的rpc通信地址--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;hb2:10020&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- mr转化历史任务的http通信地址--&gt;</span><br><span class="line">&lt;property&gt; </span><br><span class="line">          &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;  </span><br><span class="line">          &lt;value&gt;hb2:19888&lt;/value&gt;          </span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 会在hdfs的根目录下面创建一个history的文件夹，存放历史任务的相关运行情况--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.app.mapreduce.am.staging-dir&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;/history&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- map和reduce的日志级别--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;mapreduce.map.log.level&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;INFO&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;mapreduce.reduce.log.level&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;INFO&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>(4) yarn-site.xml配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定RM的cluster id --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;yrc&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定RM的名字 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;rm1,rm2&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 分别指定RM的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;hb1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;hb2&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定zk集群地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;hb1:2181,hb2:2181,hb3:2181,hb4:2181,hb5:2181&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">          &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>(5) hadoop-env.sh配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/jdk1.8.0_111</span><br><span class="line">export HADOOP_HEAPSIZE=6144</span><br><span class="line">export HADOOP_NAMENODE_INIT_HEAPSIZE=2048</span><br><span class="line">export HADOOP_PID_DIR=/home/hadoop-2.7.2-ha/hadoop-2.7.2/pids</span><br><span class="line">export HADOOP_SECURE_DN_PID_DIR=/home/hadoop-2.7.2-ha/hadoop-2.7.2/pids</span><br></pre></td></tr></table></figure></p><p>(6) mapred-env.sh配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_MAPRED_PID_DIR=/home/hadoop-2.7.2-ha/hadoop-2.7.2/pids</span><br></pre></td></tr></table></figure></p><p>(7) yarn-env.sh配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/jdk1.8.0_111</span><br><span class="line">export YARN_PID_DIR=/home/hadoop-2.7.2-ha/hadoop-2.7.2/pids</span><br></pre></td></tr></table></figure></p><p>4、slaves配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hb1</span><br><span class="line">hb2</span><br><span class="line">hb3</span><br><span class="line">hb4</span><br><span class="line">hb5</span><br></pre></td></tr></table></figure></p><p>5、创建目录：<code>mkdir tmp journaldata name data logs pids</code><br>6、将hadoop-2.7.2-ha目录拷贝到其他节点上</p><blockquote><p>scp -r hadoop-2.7.2-ha hb2:/home/</p></blockquote><p>7、初始化集群和启动<br>（1）分别启动各个JournalNode</p><blockquote><p>./hadoop-daemon.sh start journalnode</p></blockquote><p>（2）在其中一个NameNode节点中初始化NameNode，这里选择master1上的NameNode</p><blockquote><p>hdfs namenode -format</p></blockquote><p>（3）启动第2步初始化好的NameNode服务</p><blockquote><p>./hadoop-daemon.sh start namenode</p></blockquote><p>（4）在master2服务器中运行下面命令来同步master1上的NameNode的元数据</p><blockquote><p>hdfs namenode -bootstrapStandby</p></blockquote><p>（5）在其中一个NameNode节点中初始化ZKFC的状态，这里选择master1上的NameNode</p><blockquote><p>hdfs zkfc -formatZK</p></blockquote><p>（6）启动Hadoop的HA集群</p><blockquote><p>./start-dfs.sh</p></blockquote><p>8、通过<code>master:50070</code>访问Hadoop Web UI</p><p><img src="https://upload-images.jianshu.io/upload_images/18944909-9334696f265359c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/18944909-b28a2c1ae562fe5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="Hbase-HA集群配置"><a href="#Hbase-HA集群配置" class="headerlink" title="Hbase HA集群配置"></a>Hbase HA集群配置</h1><p>进入hbase配置文件目录<code>/home/hbase-1.2.4-ha/hbase-1.2.4/conf</code><br>1、hbase-env.sh配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/jdk1.8.0_111</span><br><span class="line">export HADOOP_HOME=/home/hadoop-2.7.2-ha/hadoop-2.7.2</span><br><span class="line">export HBASE_PID_DIR=/home/hbase-1.2.4-ha/hbase-1.2.4/pids</span><br><span class="line">export HBASE_LOG_DIR=/home/hbase-1.2.4-ha/hbase-1.2.4/logs</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure></p><p><code>因为是jdk1.8，所以注释掉下面两行，并配置regionserver内存</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_OPTS=&quot;-Xmn2G -Xss256k -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m -XX:ParallelGCThreads=24 -XX:+UseCompressedOops -XX:GCTimeRatio=19 -XX:SoftRefLRUPolicyMSPerMB=0 -XX:SurvivorRatio=2 -XX:MaxTenuringThreshold=1 -XX:+UseFastAccessorMethods -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSClassUnloadingEnabled -XX:CMSMaxAbortablePrecleanTime=300 -XX:+CMSScavengeBeforeRemark&quot;</span><br><span class="line">export HBASE_REGIONSERVER_OPTS=&quot;-Xms8G -Xmx8G $HBASE_OPTS&quot;</span><br><span class="line">export HBASE_MASTER_OPTS=&quot;-Xms3G -Xmx3G $HBASE_OPTS&quot;</span><br></pre></td></tr></table></figure></p><p>2、hbase-site.xml配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;hdfs://ns1/hbase&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.master&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;60000&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;/home/hbase-1.2.4-ha/hbase-1.2.4/tmp&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;hb1,hb2,hb3,hb4,hb5&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;/home/zookeeper-3.4.9/data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.property.clientPort&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;2181&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;zookeeper.session.timeout&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;120000&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.regionserver.restart.on.zk.expire&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;!--默认: 10  :RegionServers受理的RPC Server实例数量。对于Master来说，这个属性是Master受理的handler数量.--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.regionserver.handler.count&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;100&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"> &lt;!--默认: 1  :当调用Scanner的next方法，而值又不在缓存里的时候，从服务端一次获取的行数。越大的值意味着Scanner会快一些，</span><br><span class="line">            但是会占用更多的内存。 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.client.scanner.caching&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;100&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;!--默认: false  :体验特性：启用memStore分配本地缓冲区。这个特性是为了防止在大量写负载的时候堆的碎片过多。</span><br><span class="line">          这可以减少GC操作的频率。说明：减少因内存碎片导致的Full GC，提高整体性能。--&gt;</span><br><span class="line">       &lt;property&gt;            &lt;name&gt;hbase.hregion.memstore.mslab.enabled&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">&lt;!--默认: 10  :客户端最多重试次数,可以设为11。 --&gt;</span><br><span class="line">       &lt;property&gt; </span><br><span class="line">            &lt;name&gt;hbase.client.retries.number&lt;/name&gt;  </span><br><span class="line">            &lt;value&gt;11&lt;/value&gt; </span><br><span class="line">       &lt;/property&gt; </span><br><span class="line">&lt;!--默认: false  :建议设为true，关闭消息缓冲。 --&gt;</span><br><span class="line">       &lt;property&gt; </span><br><span class="line">           &lt;name&gt;hbase.ipc.client.tcpnodelay&lt;/name&gt;  </span><br><span class="line">           &lt;value&gt;true&lt;/value&gt; </span><br><span class="line">       &lt;/property&gt;  </span><br><span class="line"> &lt;!--默认: 60000  :表示HBase客户端发起一次scan操作的rpc调用至得到响应之间总的超时时间。--&gt;</span><br><span class="line">       &lt;property&gt;</span><br><span class="line">           &lt;name&gt;hbase.client.scanner.timeout.period&lt;/name&gt;</span><br><span class="line">           &lt;value&gt;120000&lt;/value&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line"> &lt;!--默认: 60000  :该参数表示一次RPC请求的超时时间。如果某次RPC时间超过该值，客户端就会主动关闭socket。 --&gt;</span><br><span class="line">       &lt;property&gt;</span><br><span class="line">          &lt;name&gt;hbase.rpc.timeout&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;180000&lt;/value&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">       &lt;property&gt;    </span><br><span class="line">          &lt;name&gt;hbase.hregion.memstore.block.multiplier&lt;/name&gt;    </span><br><span class="line">          &lt;value&gt;8&lt;/value&gt;    </span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">       &lt;property&gt;</span><br><span class="line">          &lt;name&gt;hbase.hstore.blockingStoreFiles&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;30&lt;/value&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">       &lt;property&gt;</span><br><span class="line">          &lt;name&gt;hbase.client.write.buffer&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;5242880&lt;/value&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>3、配置hbase环境变量：<code>vim /etc/profile</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_HOME=/home/hbase-1.2.4-ha/hbase-1.2.4</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure></p><p>使配置生效</p><blockquote><p>source /etc/profile</p></blockquote><p>4、在conf目录下新建backup-masters，配置备用节点：<code>vim backup-masters</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hb2</span><br></pre></td></tr></table></figure></p><p>5、配置regionservers<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hb1</span><br><span class="line">hb2</span><br><span class="line">hb3</span><br><span class="line">hb4</span><br><span class="line">hb5</span><br></pre></td></tr></table></figure></p><p>6、创建目录：<code>mkdir pids tmp logs</code><br>7、删除hbase的slf4j-log4j12-1.7.5.jar，解决hbase和hadoop的LSF4J包冲突</p><blockquote><p>mv slf4j-log4j12-1.7.5.jar slf4j-log4j12-1.7.5.jar.bk</p></blockquote><p>8、拷贝hadoop的core-site.xml和hdfs-site.xml拷贝到hbase的conf下</p><blockquote><p>scp core-site.xml hb1:/home/hbase-1.2.4-ha/hbase-1.2.4/conf/<br>scp hdfs-site.xml hb1:/home/hbase-1.2.4-ha/hbase-1.2.4/conf/</p></blockquote><p>9、将hbase-1.2.4-ha目录拷贝到其他节点上</p><blockquote><p>scp -r hbase-1.2.4-ha/ hb2:/home</p></blockquote><p>10、在主节点上运行hbase：<code>./start-hbase.sh start</code></p><p>11、在浏览器中输入<code>master:16010</code>进入Hbase Web UI<br><img src="https://upload-images.jianshu.io/upload_images/18944909-d71cfa571ee421be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章作者：易明&lt;br&gt;个人博客：&lt;a href=&quot;https://yiming1012.github.io&quot;&gt;https://yiming1012.github.io&lt;/a&gt;&lt;br&gt;简书主页：&lt;a href=&quot;https://www.jianshu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo修改主题</title>
    <link href="https://yiming1012.github.io/2019/08/13/Hexo%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98/"/>
    <id>https://yiming1012.github.io/2019/08/13/Hexo修改主题/</id>
    <published>2019-08-13T02:24:10.000Z</published>
    <updated>2019-08-13T06:35:24.539Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章作者：易明<br>个人博客：<a href="https://yiming1012.github.io">https://yiming1012.github.io</a><br>简书主页：<a href="https://www.jianshu.com/u/6ebea55f5cec" target="_blank" rel="noopener">https://www.jianshu.com/u/6ebea55f5cec</a><br>邮箱地址：<a href="https://links.jianshu.com/go?to=mailto%3A1129079384%40qq.com" target="_blank" rel="noopener">1129079384@qq.com</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>   最近，基于Win10+Hexo+Github搭建了个人博客，但是主题比较朴素，于是决定根据Hexo官网提供的主题进行设置。</p><h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><ol><li><p>进入<code>Hexo</code>官网<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> 下载自己喜欢的主题<br><img src="https://github.com/yiming1012/resource/blob/master/back.jpg" alt="Themes"></p></li><li><p>根据官网提供安装步骤，在所建博客目录blog下点击鼠标右键进入<code>Git Bash</code>客户端，执行命令：</p><blockquote><p>npm i hexo-generator-json-content –save &amp;&amp; npm i –save hexo-wordcount &amp;&amp; git clone <a href="https://github.com/fi3ework/hexo-theme-archer.git" target="_blank" rel="noopener">https://github.com/fi3ework/hexo-theme-archer.git</a> themes/archer –depth=1</p></blockquote></li><li><p>将配置文件<code>_config.yml</code>中的theme配置改为：<code>archer</code></p><blockquote><p>theme:archer</p></blockquote></li><li><p>在配置文件<code>_config.yml</code>最后添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  meta: true</span><br><span class="line">  pages: false</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    date: true</span><br><span class="line">    path: true</span><br><span class="line">    text: false</span><br><span class="line">    raw: false</span><br><span class="line">    content: false</span><br><span class="line">    slug: false</span><br><span class="line">    updated: false</span><br><span class="line">    comments: false</span><br><span class="line">    link: false</span><br><span class="line">    permalink: true</span><br><span class="line">    excerpt: false</span><br><span class="line">    categories: true</span><br><span class="line">    tags: true</span><br></pre></td></tr></table></figure></li><li><p>进入<code>D:\blog\themes\archer</code>目录下配置<code>_config.yml</code>文件，里面的图片地址为相对路径，你可以将需要使用的图片放到下面目录中：<code>D:\blog\themes\archer\source\intro</code><br><img src="https://upload-images.jianshu.io/upload_images/18944909-0bc34f50aeb8688d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="config.yml"></p></li><li><p>通过命令提交：<code>hexo d -g</code>，看到效果图如下：<br><img src="https://upload-images.jianshu.io/upload_images/18944909-97101ecf9a5d227b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章作者：易明&lt;br&gt;个人博客：&lt;a href=&quot;https://yiming1012.github.io&quot;&gt;https://yiming1012.github.io&lt;/a&gt;&lt;br&gt;简书主页：&lt;a href=&quot;https://www.jianshu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Win10+Hexo+GitHub搭建个人博客详解</title>
    <link href="https://yiming1012.github.io/2019/08/13/Win10+Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E8%A7%A3/"/>
    <id>https://yiming1012.github.io/2019/08/13/Win10+Hexo+GitHub搭建个人博客详解/</id>
    <published>2019-08-13T01:01:10.000Z</published>
    <updated>2019-08-13T05:36:44.740Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章作者：易明<br>个人博客：<a href="https://yiming1012.github.io">https://yiming1012.github.io</a><br>简书主页：<a href="https://www.jianshu.com/u/6ebea55f5cec" target="_blank" rel="noopener">https://www.jianshu.com/u/6ebea55f5cec</a><br>邮箱地址：<a href="mailto:1129079384@qq.com" target="_blank" rel="noopener">1129079384@qq.com</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>&#160; &#160; &#160;&#160; 最近，在简书上写了几篇博客，发现简书可能没做反扒机制，导致简书被盗文的情况屡见不鲜。于是，决定搭建属于自己的个人博客。通过调研，尝试了下Win10+Hexo+GitHub的组合，成功搭建了自己的博客，以下为详细步骤。</p><h1 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h1><p>1、Node.js下载和安装：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br><img src="https://upload-images.jianshu.io/upload_images/18944909-95f4bc0be0783742.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>2、Git下载和安装：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a><br><img src="https://upload-images.jianshu.io/upload_images/18944909-55cd0e65900c19b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>3、GitHub注册和创建仓库：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>在GitHub账号创建成功之后，需要创建一个仓库来管理自己的文件。<br>(1) 点击个人主页右上角“<code>+</code>”里面的<code>New repository</code><br><img src="https://upload-images.jianshu.io/upload_images/18944909-0e143ffaf1312bea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>(2) 输入Repository name：<code>用户名.github.io</code>，注意：<code>用户名一定要和注册的用户名一样</code><br><img src="https://upload-images.jianshu.io/upload_images/18944909-42223ef271f746ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>4、配置SSH免密登录<br>（1）在桌面点击鼠标右键，选择”Git Bash Here”，打开Git Bash终端。<br>（2）设置user name和email：</p><blockquote><p>git config –global user.name “GitHub用户名”<br>git config –global user.email “GitHub注册邮箱”          </p></blockquote><p>（3）生成SSH密钥</p><blockquote><p>ssh-keygen -t rsa -C “GitHub注册邮箱”</p></blockquote><p>（4）输入命令后直接回车即可，在C盘的用户目录下会生成<code>.ssh</code>文件夹（我电脑上的目录为<code>C:\Users\yiming\.ssh</code>），里面有私钥<code>id_rsa</code>和公钥<code>id_rsa_pub</code>。</p><p>（5）在GitHub上添加SSH keys。具体步骤是点击GitHub头像下的<code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>，将本地的公钥<code>id_rsa_pub</code>内容复制粘贴到其中即可。<br><img src="https://upload-images.jianshu.io/upload_images/18944909-de1dcab56d639592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/18944909-4c3dbce121254960.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>（6）验证SSH免密是否成功</p><blockquote><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p></blockquote><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>1、进入cmd命令行，创建一个本地仓库，比如在D盘创建一个blog文件夹，切换到blog目录</p><blockquote><p>D:    //进入D盘<br>mkdir blog //创建blog目录<br>cd blog //切换到blog目录</p></blockquote><p>2、使用<code>淘宝</code>的npm源安装hexo</p><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>cnpm install hexo-cli -g<br>cnpm install hexo –save</p></blockquote><p>3、在blog目录下点击鼠标右键，打开“<code>Git Bash</code>”终端，<code>如果在其他地方打开Git Bash终端，会出现：hexo：commad not found</code> 。初始化hexo：</p><blockquote><p>hexo init</p></blockquote><p>4、安装依赖及相关插件</p><blockquote><p>cnpm install<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-index --save</span><br><span class="line">cnpm install hexo-generator-archive --save</span><br><span class="line">cnpm install hexo-generator-category --save</span><br><span class="line">cnpm install hexo-generator-tag --save</span><br><span class="line">cnpm install hexo-server --save</span><br><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">cnpm install hexo-deployer-heroku --save</span><br><span class="line">cnpm install hexo-deployer-rsync --save</span><br><span class="line">cnpm install hexo-deployer-openshift --save</span><br><span class="line">cnpm install hexo-renderer-marked@0.2 --save</span><br><span class="line">cnpm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">cnpm install hexo-generator-feed@1 --save</span><br><span class="line">cnpm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure></p></blockquote><p>5、启动Hexo</p><blockquote><p>hexo server   （或者hexo s）</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/18944909-c4424e14e9c57664.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>6、在浏览器中输入：<code>localhost:4000</code>，可以看到Hexo的示例页面<br><img src="https://upload-images.jianshu.io/upload_images/18944909-0f6a98b980fa0f32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="将博客部署到GitHub"><a href="#将博客部署到GitHub" class="headerlink" title="将博客部署到GitHub"></a>将博客部署到GitHub</h1><p>1、配置文件以关联远程仓库，在blog目录下找到<code>_config.yml</code>文件，用文本编辑器Nodepad ++或Sublime Text打开，在最下方添加远程仓库地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #yiming1012改为你的github用户名（请修改）</span><br><span class="line">  repository: https://github.com/yiming1012/yiming1012.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>2、新建博客，在<code>D:\blog\source\_posts</code>目录下会生成firstblog.md的文件</p><blockquote><p>hexo new “firstblog”</p></blockquote><p>3、你可以根据Markdown语法来编辑上面的文件<br><img src="https://upload-images.jianshu.io/upload_images/18944909-4f82a4f56ea56016.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="博客内容.png"><br>4、设置身份信息</p><blockquote><p>git config –global user.name “GitHub用户名”<br>git config –global user.email “GitHub注册邮箱” </p></blockquote><p>5、部署到GitHub</p><blockquote><p>hexo deploy （可以简写为：hexo d）</p></blockquote><p>6、在浏览器上输入：<code>用户名.github.io</code>（我的是yiming1012.github.io）即可看到刚才写的博客已提交到仓库<br><img src="https://upload-images.jianshu.io/upload_images/18944909-1a39ed1b9827796f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="blog.png"></p><p>7、一个简单的博客就搭建起来了，后续还有待完善……<code>修改Hexo主题</code>请参见我的下一篇文章：<a href="https://www.jianshu.com/p/869c6bcd0647" target="_blank" rel="noopener">https://www.jianshu.com/p/869c6bcd0647</a></p><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><blockquote><p>1.<a href="https://hujichn.github.io/2016/04/06/Win10%E4%B8%8A%E5%88%A9%E7%94%A8github+hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/](https://hujichn.github.io/2016/04/06/Win10%E4%B8%8A%E5%88%A9%E7%94%A8github+hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/)" target="_blank" rel="noopener">https://hujichn.github.io/2016/04/06/Win10%E4%B8%8A%E5%88%A9%E7%94%A8github+hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/](https://hujichn.github.io/2016/04/06/Win10%E4%B8%8A%E5%88%A9%E7%94%A8github+hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/)</a><br>2.<a href="https://zhuanlan.zhihu.com/p/22405775" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22405775</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章作者：易明&lt;br&gt;个人博客：&lt;a href=&quot;https://yiming1012.github.io&quot;&gt;https://yiming1012.github.io&lt;/a&gt;&lt;br&gt;简书主页：&lt;a href=&quot;https://www.jianshu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yiming1012.github.io/2019/08/12/hello-world/"/>
    <id>https://yiming1012.github.io/2019/08/12/hello-world/</id>
    <published>2019-08-12T12:40:53.253Z</published>
    <updated>2019-08-12T12:40:53.253Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
